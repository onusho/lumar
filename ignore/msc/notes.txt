weaviate
    .connect_to_local()
        client
            
            .get_meta()

            .collections

                .create()
                    name=

                    vectorizer_config=Configure.Vectorizer.text2vec_ollama()
                    [
                        Configure.NamedVectors.text2vec_ollama(
                            name=
                            source_properties=
                            api_endpoint=
                            model=
                        )]

                    vector_index_config=Configure.VectorIndex.hsnw()

                    generative_config=Configure.Generative.ollama(
                        api_endpoint="http://host.docker.internal:11434",
                        model=""
                    )

                        from weaviate.classes.config import Property, DataType
                    properties=[
                        Property(name="name",
                                data_type=DataType.TEXT
                                vectorize_property_name=
                                tokenization=Tokenization.WHITESPACE
                                skip_vectorization=)
                        Property(name="text", data_type=DataType.BLOB)
                    ]

                .get()
                    
                .config 
                    .get()

                .list_all()

                .delete()

                collection

                    .batch
                        .dynamic() as batch:
                            .add_object(properties=)
                        .fixed_size(batch_size=200)
                    .data
                        .insert({})
                            properties=
                            vector=
                            uuid=
                        .insert_many()
                        .exists()
                        .update()
                        .replace()
                        .delete_by_id()
                        .delete_many()
                    
                    .query 
                        .near_text()
                            query=""
                            distance=
                            auto_limit=
                                from weaviate.classes.query import MetadataQuery, Filter, GroupBy
                            group_by=
                            filter=
                                Filter.by_property("round").equal("Double Jeopardy!"),
                            target_vector=[]
                                TargetVectors.average([])
                                    .sum()
                                    .minimum()
                                    .manual_weights()
                            rereank=
                                Rerank(
                                    prop="",
                                    query=""
                                ),
                        .near_image()
                            near_image=base64_string
                                from pathlib import Path
                            near_image=Path("./images/search-image.jpg")
                        
                        .hybrid()
                            target_vector=
                            alpha=
                            fusion_type=
                            query_properties=
                        .near_object()
                        .near_vector()
                        .bm25()
                            query_properties=
                        
                        .fetch_objects()
                        .fetch_object_by_id()

                            limit=
                            offset=
                            target_vector=
                            return_properties=
                            include_vector=
                            return_references=
                            return_metadata=
                                MetadataQuery(distance=True)
                    
                    .generate
                        .near_text()
                            query=
                            limit=
                            target_vector=
                            single_prompt=
                            grouped_task=
                            grouped_properties=[]
                            return_metadata=
                    
                    .aggregate
                        .all_over()
                    .iterator()

-------------------------------------------------------------------------------------------------
import base64

def to_base64(path):
    ---
    return base64.b64encode(content).decode("utf-8")


import weaviate
import weaviate.classes as wvc
import os, json, requests

client = weaviate.connect_to_local(
    headers={
        "X-OpenAI-Api-Key": os.environ["OPENAI_API_KEY"],
        "X-Cohere-Api-Key": os.environ["COHERE_API_KEY"],
    }
)

-------------------------------------------------------------------------------------------------

import weaviate.classes as wvc

vectorizer_config=[
    wvc.config.Configure.NamedVectors.text2vec_cohere(
        name="jeopardy_questions_vector",
        source_properties=["question"],
        vectorize_collection_name=False,
    ),
    wvc.config.Configure.NamedVectors.text2vec_openai(
        name="jeopardy_answers_vector",
        source_properties=["answer"],
        vectorize_collection_name=False,
    ),
],
properties=[
    wvc.config.Property(name="category", data_type=wvc.config.DataType.TEXT),
    wvc.config.Property(name="question", data_type=wvc.config.DataType.TEXT),
    wvc.config.Property(name="answer", data_type=wvc.config.DataType.TEXT),
]


-------------------------------------------------------------------------------------------------
question_objects = list()
for row in data:
    question_objects.append(
        {
            "question": row["Question"],
            "answer": row["Answer"],
            "category": row["Category"],
        }
    )

# Upload the sample data
nvjc_collection = client.collections.get("Named_Vector_Jeopardy_Collection")
with nvjc_collection.batch.dynamic() as batch:
    for q in question_objects:
        batch.add_object(properties=q)


-------------------------------------------------------------------------------------------------
uuid = reviews.data.insert(
    properties={
        "title": "A delicious Riesling",
        "review_body": "This wine is a delicious Riesling which pairs well with seafood.",
        "country": "Germany",
    },
    # Specify the named vectors, following the collection definition
    vector={
        "title": [0.12345] * 1536,
        "review_body": [0.31313] * 1536,
        "title_country": [0.05050] * 1536,
    }
)-------------------------------------------------------------------------------------------------
data_rows = [
    {"title": f"Object {i+1}"} for i in range(5)
]

collection = client.collections.get("MyCollection")

with collection.batch.dynamic() as batch:
    for data_row in data_rows:
        batch.add_object(
            properties=data_row,
        )

